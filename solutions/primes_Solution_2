----------------------------------------------------------------------------------------------------------------------- |
-- Reconstructing built-in Haskell functions     ---------------------------------------------------------------------- |
----------------------------------------------------------------------------------------------------------------------- |
-- not        --------------------------------------------------------------------------------------------------------- |
-- (&&)       --------------------------------------------------------------------------------------------------------- |
-- (||)       --------------------------------------------------------------------------------------------------------- |
-- signum     --------------------------------------------------------------------------------------------------------- |
-- head       --------------------------------------------------------------------------------------------------------- |
-- tail       --------------------------------------------------------------------------------------------------------- |
-- init       --------------------------------------------------------------------------------------------------------- |
-- last       --------------------------------------------------------------------------------------------------------- |
-- fst        --------------------------------------------------------------------------------------------------------- |
-- snd        --------------------------------------------------------------------------------------------------------- |
-- min        --------------------------------------------------------------------------------------------------------- |
-- max        --------------------------------------------------------------------------------------------------------- |
-- elem       --------------------------------------------------------------------------------------------------------- |
-- any        --------------------------------------------------------------------------------------------------------- |
-- sort       --------------------------------------------------------------------------------------------------------- |
-- all        --------------------------------------------------------------------------------------------------------- |
-- zip        --------------------------------------------------------------------------------------------------------- |
-- sum        --------------------------------------------------------------------------------------------------------- |
-- foldl      --------------------------------------------------------------------------------------------------------- |
-- foldl1     --------------------------------------------------------------------------------------------------------- |
-- foldr      --------------------------------------------------------------------------------------------------------- |
-- foldr1     --------------------------------------------------------------------------------------------------------- |
----------------------------------------------------------------------------------------------------------------------- |
-- not --
not' :: Bool -> Bool
not' True = False
not' False = True
----------------------------------------------------------------------------------------------------------------------- |
-- (&&) --
andFunction :: Bool -> Bool -> Bool
andFunction True True = True
andFunction _ _ = False
----------------------------------------------------------------------------------------------------------------------- |
-- (||) --
orFunction :: Bool -> Bool -> Bool
orFunction False False = False
orFunction _ _ = True
----------------------------------------------------------------------------------------------------------------------- |
signum' :: Num a => a -> a
signum' = (^0)
----------------------------------------------------------------------------------------------------------------------- |
-- head --
head' :: [a] -> a
head' [] = error "Empty Array"
head' (x:_) = x
----------------------------------------------------------------------------------------------------------------------- |
-- tail --
tail' :: [a] -> [a]
tail' [] = error "Empty Array"
tail' (_:xs) = xs
----------------------------------------------------------------------------------------------------------------------- |
-- init --
init' :: [a] -> [a]
init' [] = error "Empty Array"
init' xs = reverse $ tail $ reverse xs
----------------------------------------------------------------------------------------------------------------------- |
-- last --
last' :: [a] -> a
last' [] = error "Empty Array"
last' xs = head $ reverse xs
----------------------------------------------------------------------------------------------------------------------- |
-- fst --
fst' :: (a, b) -> a
fst' (a, b) = a
----------------------------------------------------------------------------------------------------------------------- |
-- snd --
snd' :: (a, b) -> b
snd' (a, b) = b
----------------------------------------------------------------------------------------------------------------------- |
-- min --
min' :: Ord a => a -> a -> a
min' a b
    | a < b = a
    | otherwise = b
----------------------------------------------------------------------------------------------------------------------- |
-- max --
max' :: Ord a => a -> a -> a
max' a b
    | a > b = a
    | otherwise = b
----------------------------------------------------------------------------------------------------------------------- |
-- elem ! --
elem' :: Eq a => a -> [a] -> Bool
elem' e (x:xs) = e == x || elem' e xs
elem' e _ = False
-- Method 2 --
elem'' :: (Foldable t, Eq a) => a -> t a -> Bool
elem'' x = foldr (\ a b -> a == x || b) False
----------------------------------------------------------------------------------------------------------------------- |
-- any ! --
any' :: (a -> Bool) -> [a] -> Bool
any' f a = head ([ f e | e <- a, f e ] ++ [False])
-- Method 2 --
any'' :: Foldable t => (a -> Bool) -> t a -> Bool
any'' f = foldr (\ a b -> f a || b) False
----------------------------------------------------------------------------------------------------------------------- |
-- sort --
sort' :: Ord a => [a] -> [a]
sort' [] = []       -- Empty Array
sort' [x] = [x]     -- Last Element of an Array
sort' (x:y:xs) = place x (sort' (y:xs)) -- Place Element x in the New Sorted Array
place :: Ord a => a -> [a] -> [a]       -- Function 'place' takes elemnt x and the New Sorted Array (where s is the smallest element)
place x (s:xs)                          -- and returns a Newer, Longer, Sorted Array 
    | x < s = x:s:xs
    | x == s = s:x:xs
    | otherwise = s : place x xs
place x [] = [x]
----------------------------------------------------------------------------------------------------------------------- |
-- all ! --
all' :: (a -> Bool) -> [a] -> Bool
all' f a = head ([ f e | e <- a, not (f e) ] ++ [True])
-- Method 2 --
all'' :: Foldable t => (a -> Bool) -> t a -> Bool
all'' f = foldr (\ a b -> f a && b) True
----------------------------------------------------------------------------------------------------------------------- |
-- zip --
zip' :: [a] -> [b] -> [(a, b)]
zip' (a:as) (b:bs) = (a,b) : zip' as bs
zip' _ _ = []
----------------------------------------------------------------------------------------------------------------------- |
-- sum --
sum' :: Num a => [a] -> a
sum' [] = 0
sum' (x:xs) = x + sum' xs
-- Method 2 --
sum'' :: (Foldable t, Num a) => t a -> a
sum'' = foldr (+) 0
----------------------------------------------------------------------------------------------------------------------- |
-- foldl --
foldl'' :: (b -> a -> b) -> b -> [a] -> b
foldl'' f v [] = v
foldl'' f v xs = f (foldl'' f v (init xs)) (last xs)
----------------------------------------------------------------------------------------------------------------------- |
-- foldl1 --
foldl1'' :: (a -> a -> a) -> [a] -> a
foldl1'' f [] = error "Empty Array"
foldl1'' f [x] = x
foldl1'' f xs = f (foldl1'' f (init xs)) (last xs)
----------------------------------------------------------------------------------------------------------------------- |
-- foldr --
foldr'' :: (a -> b -> b) -> b -> [a] -> b
foldr'' f v [] = v
foldr'' f v (x:xs) = x `f` (foldr'' f v xs)
----------------------------------------------------------------------------------------------------------------------- |
-- foldr1 --
foldr1'' :: (a -> a -> a) -> [a] -> a
foldr1'' f [] = error "Empty String"
foldr1'' f [x] = x
foldr1'' f (x:xs) = x `f` foldr1'' f xs
----------------------------------------------------------------------------------------------------------------------- |
-- End of Code -------------------------------------------------------------------------------------------------------- |
